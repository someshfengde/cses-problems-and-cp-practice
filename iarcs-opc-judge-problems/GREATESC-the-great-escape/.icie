{"task_url":"https://www.codechef.com/IARCSJUD/problems/GREATESC","statement":{"HTML":{"html":"\n<html>\n\t<head>\n\t\t<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/github-markdown-css/3.0.1/github-markdown.min.css\">\n\t\t<script type=\"text/x-mathjax-config\">\n\t\t\tMathJax.Hub.Config({\n\t\t\t\ttex2jax: {inlineMath: [['$','$']]}\n\t\t\t});\n\t\t</script>\n\t\t<script src='https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-MML-AM_CHTML' async></script>\n\t\t<style>\n\t\t\t.markdown-body {\n\t\t\t\tbackground-color: white;\n\t\t\t\tpadding-bottom: 20px;\n\t\t\t}\n\t\t\t.markdown-body code {\n\t\t\t\tcolor: #24292e;\n\t\t\t}\n\t\t\t.solution-visible-txt {\n\t\t\t\tdisplay: none;\n\t\t\t}\n\t\t</style>\n\t</head>\n\t<body class=\"markdown-body\">\n\t\t<h1>The Great Escape</h1>\n<p>Heroes in Indian movies are capable of superhuman feats. For example, they can jump between buildings, jump onto and from running trains, catch bullets with their hands and teeth and so on. A perceptive follower of such movies would have noticed that there are limits to what even the superheroes can do. For example, if the hero could directly jump to his ultimate destination, that would reduce the action sequence to nothing and thus make the movie quite boring. So he typically labours through a series of superhuman steps to reach his ultimate destination.</p>\n<p>In this problem, our hero has to save his wife/mother/child/dog/... held captive by the nasty villain on the top floor of a tall building in the centre of Bombay/Bangkok/Kuala Lumpur/.... Our hero is on top of a (different) building. In order to make the action &quot;interesting&quot; the director has decided that the hero can only jump between buildings that are &quot;close&quot; to each other. The director decides which pairs of buildings are close enough and which are not.</p>\n<p>Given the list of buildings, the identity of the building where the hero begins his search, the identity of the building where the captive (wife/mother/child/dog...) is held, and the set of pairs of buildings that the hero can jump across, your aim is determine whether it is possible for the hero to reach the captive. And, if he can reach the captive he would like to do so with minimum number of jumps.</p>\n<p>Here is an example. There are $5$ buildings, numbered $1,2,...,5$, the hero stands on building $1$ and the captive is on building $4$. The director has decided that buildings $1$ and $3$, $2$ and $3, 1$ and $2, 3$ and $5$ and $4$ and $5$ are close enough for the hero to jump across. The hero can save the captive by jumping from $1$ to $3$ and then from $3$ to $5$ and finally from $5$ to $4$. (Note that if $i$ and $j$ are close then the hero can jump from $i$ to $j$ as well as from $j$ to $i$.). In this example, the hero could have also reached $4$ by jumping from $1$ to $2, 2$ to $3, 3$ to $5$ and finally from $5$ to $4$. The first route uses $3$ jumps while the second one uses $4$ jumps. You can verify that $3$ jumps is the best possible.</p>\n<p>If the director decides that the only pairs of buildings that are close enough are $1$ and $3$, $1$ and $2$ and $4$ and $5$, then the hero would not be able to reach building $4$ to save the captive.</p>\n<h3>Input:</h3>\n<p>The first line of the input contains two integers $N$ and $M$. $N$ is the number of buildings: we assume that our buildings are numbered $1,2,...,N$. $M$ is the number of pairs of buildings that the director lists as being close enough to jump from one to the other. Each of the next $M$ lines, lines $2,...,M+1$, contains a pair of integers representing a pair of buildings that are close. Line $i+1$ contains integers $A_i$ and $B_i$, $1 \\leq A_i \\leq N$ and $1 \\leq B_i \\leq N$, indicating that buildings $A_i$ and $B_i$ are close enough. The last line, line $M+2$ contains a pair of integers $S$ and $T$, where $S$ is the building from which the Hero starts his search and $T$ is the building where the captive is held.</p>\n<h3>Output:</h3>\n<p>If the hero cannot reach the captive print $0$. If the hero can reach the captive print out a single integer indicating the number of jumps in the shortest route (in terms of the number of jumps) to reach the captive.</p>\n<h3>Constraints:</h3>\n<ul>\n<li>$1 \\leq N \\leq 3500$.</li>\n<li>$1 \\leq M \\leq 1000000$.</li>\n<li>In at least $50 %$ of the inputs $1 \\leq N \\leq 1000$ and $1 \\leq M \\leq 200000$.</li>\n</ul>\n<h3>Sample Input 1:</h3>\n<pre><code>5 5\n1 3\n2 3\n1 2\n3 5\n4 5 \n1 4\n</code></pre>\n<h3>Sample Output 1:</h3>\n<pre><code>3 \n</code></pre>\n<h3>Sample Input 2:</h3>\n<pre><code>5 3\n1 3\n1 2\n4 5\n1 4\n</code></pre>\n<h3>Sample Output 2:</h3>\n<pre><code>0\n</code></pre>\n<aside style='background: #f8f8f8;padding: 10px 15px;'><div>All submissions for this problem are available.</div></aside>\n\t<body>\n</html>"}}}