{"task_url":"https://www.codechef.com/IARCSJUD/problems/MEDUVADA","statement":{"HTML":{"html":"\n<html>\n\t<head>\n\t\t<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/github-markdown-css/3.0.1/github-markdown.min.css\">\n\t\t<script type=\"text/x-mathjax-config\">\n\t\t\tMathJax.Hub.Config({\n\t\t\t\ttex2jax: {inlineMath: [['$','$']]}\n\t\t\t});\n\t\t</script>\n\t\t<script src='https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-MML-AM_CHTML' async></script>\n\t\t<style>\n\t\t\t.markdown-body {\n\t\t\t\tbackground-color: white;\n\t\t\t\tpadding-bottom: 20px;\n\t\t\t}\n\t\t\t.markdown-body code {\n\t\t\t\tcolor: #24292e;\n\t\t\t}\n\t\t\t.solution-visible-txt {\n\t\t\t\tdisplay: none;\n\t\t\t}\n\t\t</style>\n\t</head>\n\t<body class=\"markdown-body\">\n\t\t<h1>Medu Vada Maze</h1>\n<p>A maze, for our purposes, consists of a rectangular grid of cells, where some of the cells are blocked and the remaining cells are empty. A mouse is placed in one of the empty cells and a dosa is placed at a different empty cell. From a cell, the mouse can move to any empty neighbouring cell according to the rules given below. Your aim is to determine whether the mouse can walk through this maze and reach the dosa.</p>\n<p>A maze with $R$ rows and $C$ columns will be presented as a sequence of $R$ lines, each with $C$ characters. The character # denotes a blocked cell and the character . denotes an empty cell). The mouse and the dosa sit in distinct empty cells and those cells are marked by M and D instead of .</p>\n<p>Here is a maze with $6$ rows and $12$ columns.</p>\n<p>$ $</p>\n<pre><code>  ### #.#..### #\n  .M.#..#..D.#\n  #.#...#....#\n  ...#..#..#..\n  ...#.#.### .#\n  .........### \n</code></pre>\n<p>$ $</p>\n<p>We will refer to a cell by its row and column position. The rows are numbered from top to bottom and the columns from left to right. For example, in the maze above, the mouse is initially placed at position ($2$,$2$) indicating second row and second column and the dosa is at position ($2$,$10$) indicating second row and tenth column.</p>\n<p>The mouse can move from a cell to the one above it, the one below it, the one to its left or the one to its right. Further, from a cell in the leftmost column the mouse can move to the cell in the same row in the rightmost column and from a cell in the rightmost column it can move to the cell in the same row in the leftmost column. Similarly, from a cell in the top row the mouse can move to the cell in the same column in the bottom row and from a cell in the bottom row it can move to the cell in the same column in the top row. Thus, in the maze above, the mouse can move from ($4$,$1$) to ($4$,$12$) and from ($6$,$5$) to ($1$,$5$) and so on.</p>\n<p>You should think of the maze as having the shape of a solid ring, like a Medu Vada. It is as if the paper on which the Maze is drawn is rolled back and stuck at the edge so that the bottom row touches the top row. The resulting cylinder is rolled around so that the right and left columns, which now form circles, touch each other. Thus, the left most column and right most column touch each other, as do the top row and the bottom row.</p>\n<p>In the example above, the mouse can reach the dosa by walking through the following sequence of cells: ($2$,$2$), ($3$,$2$), ($4$,$2$), ($4$,$1$), ($4$,$12$), ($4$,$11$), ($3$,$11$), ($3$,$10$) and ($2$,$10$). This path is marked with with <code>x</code>'s below:</p>\n<p>$ $</p>\n<pre><code>  ### #.#..### #\n  .M.#..#..D.#\n  #x#...#..xx# \n  xx.#..#..#xx\n  ...#.#.### .# \n  .........### \n</code></pre>\n<p>$ $</p>\n<p>Alternatively it can also take the following path:</p>\n<p>$ $</p>\n<pre><code>  ### #.#.x### #\n  .M.#..#xxD.#\n  #x#...#....# \n  .x.#..#..#..\n  .x.#.#.### .#\n  .xxxxxxx.### \n</code></pre>\n<p>$ $</p>\n<p>Your task is to determine whether it possible for the mouse to reach the dosa.</p>\n<h3>Input:</h3>\n<p>The first line of the input will contain two numbers $R$ and $C$ denoting the number and rows and columns respectively. This is followed by $R$ lines, each with $C$ characters, each of which is # or . or M or D. There is exactly one M and one D in the input.</p>\n<h3>Output:</h3>\n<p>If there is no path from the mouse to the dosa print a single line containing the word NO. If there are paths from the mouse to the dosa, then the first line of the output should consist of the word YES. Following this must be R lines of C characters each, where each character is # or . or x or M or D, describing a path from M to D using the x's as illustrated above. There may be many paths and it suffices to describe one path.</p>\n<h3>Constraints:</h3>\n<ul>\n<li>$1 \\leq R \\leq 1000$.</li>\n<li>$1 \\leq C \\leq 1000$.</li>\n<li>In $80 %$ of the inputs, $3 \\leq R \\leq 60$ and $3 \\leq C \\leq 60$.</li>\n</ul>\n<h3>Sample input 1:</h3>\n<pre><code>6 12\n### #.#..### #\n.M.#..#..D.#\n#.#...#....#\n...#..#..#..\n...#.#.### .#\n.........### \n</code></pre>\n<h3>Sample output 1:</h3>\n<pre><code>YES\n### #.#..### #\n.M.#..#..D.#\n#x#...#..xx#\nxx.#..#..#xx\n...#.#.### .#\n.........### \n</code></pre>\n<h3>Sample input 2:</h3>\n<pre><code>4 6\n##.#..\n.M.#.#\n#.#.D.\n...#.#\n</code></pre>\n<h3>Sample output 2:</h3>\n<pre><code>NO\n</code></pre>\n<aside style='background: #f8f8f8;padding: 10px 15px;'><div>All submissions for this problem are available.</div></aside>\n\t<body>\n</html>"}}}